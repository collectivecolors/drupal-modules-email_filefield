<?php 
// $Id$

/**
 * @file
 * 
 * Email FileField [  email_filefield  ]
 * 
 * Defines a CCK file field formatter that allows for the 
 * emailing of files attached to content.
 * 
 * @todo Make this module work for multiple files.  Right now only a single 
 * file is supported.
 * 
 * @todo Eliminate the dependency on the thickbox module.  The thickbox module
 * can be themed out of the picture but it would be best if the module did not
 * need it installed to operate.
 */

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

define('EMAIL_FILEFIELD_DEFAULT_WIDTH', 300);
define('EMAIL_FILEFIELD_DEFAULT_HEIGHT', 350);

//------------------------------------------------------------------------------
// Drupal hooks
//------------------------------------------------------------------------------

/**
 * Implementation of hook_theme().
 * 
 * @see http://api.drupal.org/api/function/hook_theme/6
 */
function email_filefield_theme() {
  return array(
    'email_filefield_formatter_email_form' => array(
      'arguments' => array('element' => NULL),
    ),
    'email_filefield_display' => array(
      'arguments' => array('file' => NULL, 'field' => NULL),
    ),
    'email_filefield_email_link' => array(
      'arguments' => array('file' => NULL, 'field' => NULL),
    ),
    'email_filefield_email_form' => array(
      'arguments' => array('file' => NULL, 'form_content' => NULL),
    ),
  );
}

//------------------------------------------------------------------------------

/**
 * Implementation of hook_form_alter().
 *
 * @see http://api.drupal.org/api/function/hook_form_alter/6
 */
function email_filefield_form_alter(&$form, $form_state, $form_id) {
 
  // We only filefield settings forms.
  if ($form_id == 'content_field_edit_form') {
    $field = $form['#field'];
    
    if ($field['type'] == 'filefield') {
      
      // Merge our form with the default filefield settings form.
      $formatter_form = email_filefield_field_settings_form($field);
      $form = array_merge($form, $formatter_form);
      
      // Make sure the submit button is diplayed after our formatter fieldset.
      $form['submit']['#weight'] = 10;
      
      // Add our form processor.
      $form['#submit'][] = 'email_filefield_field_settings_submit';
    } 
  }
}

//------------------------------------------------------------------------------
// CCK hooks
//------------------------------------------------------------------------------

/**
 * Implementation of hook_field_formatter_info().
 */
function email_filefield_field_formatter_info() {
  return array(
    'email_form' => array(
      'label' => t('Link with popup email form'),
      'field types' => array('filefield'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'description' => t(
        'Displays a link that, when clicked, pops up a email this file form on'
        . ' the page via thickbox.'
      ),  
    ),  
  );
}

//------------------------------------------------------------------------------
// Theme functions
//------------------------------------------------------------------------------

/**
 * Theme function for the 'email_form' filefield formatter.
 */
function theme_email_filefield_formatter_email_form($element) {
  
	$file  = $element['#item'];
  $field = content_fields($element['#field_name']);

  // We need to make sure the filefield formatter library is loaded to use
  // the functions filefield_file_listed().
  module_load_include('inc', 'filefield', 'filefield_formatter');
  
  // Make sure user has permission to view this file.
  if (filefield_view_access($field['field_name']) 
      && filefield_file_listed($file, $field)) {
      
    return theme('email_filefield_display', $file, $field);
  }
  return ''; // These users can't see anything. 
}

//------------------------------------------------------------------------------

/**
 * Theme function that returns the email link and form.
 */
function theme_email_filefield_display($file, $field) {
	
	// Get form being used to get information.
	// TODO: Integrate with webforms, so you can have modifiable forms.
	//       ** Requires configurable height and width settings on popup **
	$form_input = email_filefield_get_email_form($file, $field);
	
	// Format information for display.
	$download_link = theme('filefield_file', $file);
	$email_section = '';
	
	if ($form_input) {
	  // Theme 'email this file' link.
	  $email_section = theme('email_filefield_email_link', $file, $field);
	
	  // Theme 'email form' that is handled by the thickbox display.
	  $email_section .= theme('email_filefield_email_form', $file, $form_input);
	}
	// Email form should be hidden initially. 
	return $download_link . $email_section;
}

//------------------------------------------------------------------------------

function theme_email_filefield_email_link($file, $field) {
	
	$fid  = $file['fid'];
	$name = $field['field_name'];
	
	$width  = variable_get("email_filefield_form_width_$name", 
	                       EMAIL_FILEFIELD_DEFAULT_WIDTH);
	                       
	$height = variable_get("email_filefield_form_height_$name", 
	                       EMAIL_FILEFIELD_DEFAULT_HEIGHT);
	
	$output = "<div id='email-link-$fid-cont'> ( "
	 . "<a href='#TB_inline?width=$width&height=$height&inlineId=email-form-$fid'"
	 . " class='email-link thickbox'>" 
	 . t('Email this file')
	 . "</a>"
	 . " ) </div>";
	         
	return $output;
}

//------------------------------------------------------------------------------

function theme_email_filefield_email_form($file, $form_input) {
  
	$fid = $file['fid'];
	
	$output = "<div id='email-form-$fid' class='email-form'"
	 . " style='display: none'>"
	 . $form_input
	 . "</div>";  
  
  return $output;
}

//------------------------------------------------------------------------------
// Form functions
//------------------------------------------------------------------------------

/**
 * Implementation of hook_field_settings_alter().
 */
function email_filefield_field_settings_form($field) {
  
  $name = $field['field_name'];
  
  $form['email_formatter'] = array(
  	'#type' => 'fieldset',
  	'#title' => t('Email formatter settings'),
  	'#weight' => 5,
  	'#collapsible' => FALSE,
  	'#collapsed' => FALSE,
    '#description' => t(
    	'These settings are only useful if you have selected to use the email'
    	. ' form display formatter for either teaser or full page views.'
    )
  );
  
  // TODO: Implement an alternative to webform if it doesn't exist.
  /*$form['email_formatter']['use_webform'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use an existing webform for this form input.'),
    '#default_value' => variable_get("email_filefield_use_webform_$name", 0),
  );*/
  
  $webforms = email_filefield_get_webform_options();
  $form['email_formatter']['email_webform'] = array(
  	'#type' => 'select',
  	'#title' => t('Select the webform to be used in rendering the email form'),
  	'#default_value' => variable_get("email_filefield_email_webform_$name", 
                                     key($webforms)),
  	'#options' => $webforms,
  );
  
  // TODO:  Implement an alternative to thickbox if it doesn't exist.
  /*$form['email_formatter']['use_thickbox'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use thickbox to render this form in a popup display.'),
    '#default_value' => variable_get("email_filefield_use_thickbox_$name", 0),
  );*/
  
  $form['email_formatter']['form_width'] = array(
  	'#type' => 'textfield',
  	'#title' => t('Thickbox form width'),
  	'#default_value' => variable_get("email_filefield_form_width_$name", 
                                     EMAIL_FILEFIELD_DEFAULT_WIDTH),
  	'#size' => 4,
  	'#maxlength' => 4,
  	'#element_validate' => array('email_filefield_numeric_validator'),
  );
  $form['email_formatter']['form_height'] = array(
  	'#type' => 'textfield',
  	'#title' => t('Thickbox form height'),
  	'#default_value' => variable_get("email_filefield_form_height_$name", 
                                     EMAIL_FILEFIELD_DEFAULT_HEIGHT),
  	'#size' => 4,
  	'#maxlength' => 4,
    '#element_validate' => array('email_filefield_numeric_validator'),
  );
  
  return $form;  
}

//------------------------------------------------------------------------------

function email_filefield_numeric_validator($element, &$form_state) {
  
  // Validate the numeric settings.
  $number     = $element['#value'];
  $field_name = $element['#title'];
  
  if (empty($number)) {
    form_error($element, 
      t('@field_name field is required.', 
        array('@field_name' => $field_name)
      )
    );  
  }
  
  if (!is_numeric($number) || $number <= 0) {
    form_error($element, 
      t('@field_name field must be a positive integer.',
        array('@field_name' => $field_name)
      )
    );
  }
}

//------------------------------------------------------------------------------

function email_filefield_field_settings_submit($form, &$form_values) {
  
  $values = $form_values['values'];
  $name   = $values['field_name'];
  
  variable_set("email_filefield_use_webform_$name", $values['use_webform']);
  variable_set("email_filefield_email_webform_$name", $values['email_webform']);
  
  variable_set("email_filefield_use_thickbox_$name", $values['use_thickbox']);
  variable_set("email_filefield_form_width_$name", $values['form_width']);
  variable_set("email_filefield_form_height_$name", $values['form_height']);  
}

//------------------------------------------------------------------------------

/**
 * Return the HTMLified send mail form ready for theme injection.
 */
function email_filefield_get_email_form($file, $field) {
	
  $name        = $field['field_name'];
	$webform_nid = variable_get("email_filefield_email_webform_$name", NULL);
	
	if ($webform_nid) {
	  $webform = node_load($webform_nid);
	  
	  if ($webform) {
	    $form = drupal_get_form('email_filefield_webform_form', $webform, $file);
      return theme('webform_view', $webform, FALSE, TRUE, $form, TRUE);
	  }
	}
	return '';
}

//------------------------------------------------------------------------------

/**
 * Return the actual send email form.
 * 
 * This is an altered webform.  Webform form handlers should still be applied.
 */
function email_filefield_webform_form($form_state, $webform, $file) {
	
	// Get the raw webform.
	$form = webform_client_form($form_state, $webform, array(), TRUE, FALSE);
	
	// Eliminate the typical webform redirection.
	unset($form['#action']);
	
	// Add our special values.
	$form['#filefield'] = $file;
	
	// Add our own submit handler.
	$form['#submit'][] = 'email_filefield_webform_form_submit';
	
	// krumo($form);
	
	return $form;	
}

//------------------------------------------------------------------------------

/**
 * Submit handler for the send email form.
 */
function email_filefield_webform_form_submit($form, &$form_state) {
	
	$file = $form['#filefield'];
	
	// krumo($file);
	
	// TODO: Send email to destination email with attached file and message.
	
}

//------------------------------------------------------------------------------
// Internal utilities
//------------------------------------------------------------------------------

/**
 * Return all available webforms for use in email form selection.
 */
function email_filefield_get_webform_options() {
  
  $options = array();
  
  $results = db_query(
  	'SELECT * FROM {node} n'
  	. ' WHERE n.type = "webform"'
  	. ' ORDER BY n.title'
  );
  
  while($webform = db_fetch_object($results)) {
    $options[$webform->nid] = check_plain($webform->title);  
  }
  
  return $options;
}

//------------------------------------------------------------------------------
